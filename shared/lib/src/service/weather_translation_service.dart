/// üåç Weather Translation Service
///
/// Ch·ª©c nƒÉng:
/// - Translate weather descriptions t·ª´ English sang c√°c ng√¥n ng·ªØ kh√°c
/// - Fallback mechanism khi API kh√¥ng h·ªó tr·ª£ locale
/// - Mapping weather conditions theo chu·∫©n OpenWeatherMap

import 'package:injectable/injectable.dart';

/// Weather translation service v·ªõi dependency injection
@LazySingleton()
class WeatherTranslationService {
  /// Weather condition translations
  static const Map<String, Map<String, String>> _translations = {
    // Clear sky
    'clear sky': {'vi': 'Tr·ªùi quang ƒë√£ng', 'en': 'Clear sky'},
    'few clouds': {'vi': '√çt m√¢y', 'en': 'Few clouds'},
    'scattered clouds': {'vi': 'M√¢y r·∫£i r√°c', 'en': 'Scattered clouds'},
    'broken clouds': {'vi': 'M√¢y √¢m u', 'en': 'Broken clouds'},
    'overcast clouds': {'vi': 'Tr·ªùi √¢m u', 'en': 'Overcast clouds'},

    // Rain
    'light rain': {'vi': 'M∆∞a nh·∫π', 'en': 'Light rain'},
    'moderate rain': {'vi': 'M∆∞a v·ª´a', 'en': 'Moderate rain'},
    'heavy intensity rain': {'vi': 'M∆∞a to', 'en': 'Heavy rain'},
    'very heavy rain': {'vi': 'M∆∞a r·∫•t to', 'en': 'Very heavy rain'},
    'extreme rain': {'vi': 'M∆∞a c·ª±c to', 'en': 'Extreme rain'},
    'shower rain': {'vi': 'M∆∞a r√†o', 'en': 'Shower rain'},
    'light intensity shower rain': {
      'vi': 'M∆∞a r√†o nh·∫π',
      'en': 'Light shower rain',
    },
    'heavy intensity shower rain': {
      'vi': 'M∆∞a r√†o to',
      'en': 'Heavy shower rain',
    },

    // Drizzle
    'light intensity drizzle': {'vi': 'M∆∞a ph√πn nh·∫π', 'en': 'Light drizzle'},
    'drizzle': {'vi': 'M∆∞a ph√πn', 'en': 'Drizzle'},
    'heavy intensity drizzle': {'vi': 'M∆∞a ph√πn n·∫∑ng', 'en': 'Heavy drizzle'},

    // Thunderstorm
    'thunderstorm with light rain': {
      'vi': 'D√¥ng k√®m m∆∞a nh·∫π',
      'en': 'Thunderstorm with light rain',
    },
    'thunderstorm with rain': {
      'vi': 'D√¥ng k√®m m∆∞a',
      'en': 'Thunderstorm with rain',
    },
    'thunderstorm with heavy rain': {
      'vi': 'D√¥ng k√®m m∆∞a to',
      'en': 'Thunderstorm with heavy rain',
    },
    'light thunderstorm': {'vi': 'D√¥ng nh·∫π', 'en': 'Light thunderstorm'},
    'thunderstorm': {'vi': 'D√¥ng', 'en': 'Thunderstorm'},
    'heavy thunderstorm': {'vi': 'D√¥ng m·∫°nh', 'en': 'Heavy thunderstorm'},

    // Snow
    'light snow': {'vi': 'Tuy·∫øt nh·∫π', 'en': 'Light snow'},
    'snow': {'vi': 'C√≥ tuy·∫øt', 'en': 'Snow'},
    'heavy snow': {'vi': 'Tuy·∫øt to', 'en': 'Heavy snow'},
    'sleet': {'vi': 'M∆∞a tuy·∫øt', 'en': 'Sleet'},
    'light shower sleet': {'vi': 'M∆∞a tuy·∫øt nh·∫π', 'en': 'Light shower sleet'},
    'shower sleet': {'vi': 'M∆∞a tuy·∫øt r√†o', 'en': 'Shower sleet'},
    'light rain and snow': {
      'vi': 'M∆∞a v√† tuy·∫øt nh·∫π',
      'en': 'Light rain and snow',
    },
    'rain and snow': {'vi': 'M∆∞a v√† tuy·∫øt', 'en': 'Rain and snow'},
    'light shower snow': {'vi': 'Tuy·∫øt r√†o nh·∫π', 'en': 'Light shower snow'},
    'shower snow': {'vi': 'Tuy·∫øt r√†o', 'en': 'Shower snow'},
    'heavy shower snow': {'vi': 'Tuy·∫øt r√†o to', 'en': 'Heavy shower snow'},

    // Atmosphere
    'mist': {'vi': 'S∆∞∆°ng m√π', 'en': 'Mist'},
    'smoke': {'vi': 'Kh√≥i', 'en': 'Smoke'},
    'haze': {'vi': 'S∆∞∆°ng kh√¥', 'en': 'Haze'},
    'sand/dust whirls': {'vi': 'L·ªëc c√°t/b·ª•i', 'en': 'Sand/dust whirls'},
    'fog': {'vi': 'S∆∞∆°ng m√π d√†y ƒë·∫∑c', 'en': 'Fog'},
    'sand': {'vi': 'C√°t', 'en': 'Sand'},
    'dust': {'vi': 'B·ª•i', 'en': 'Dust'},
    'volcanic ash': {'vi': 'Tro n√∫i l·ª≠a', 'en': 'Volcanic ash'},
    'squalls': {'vi': 'Gi√≥ gi·∫≠t', 'en': 'Squalls'},
    'tornado': {'vi': 'L·ªëc xo√°y', 'en': 'Tornado'},
  };

  /// Translate weather description to target language
  ///
  /// [description]: Original weather description t·ª´ API
  /// [targetLang]: Target language code (vi, en)
  ///
  /// Returns translated description ho·∫∑c original n·∫øu kh√¥ng t√¨m th·∫•y translation
  String translateWeatherDescription(String description, String targetLang) {
    final lowercaseDesc = description.toLowerCase();

    // T√¨m translation tr·ª±c ti·∫øp
    if (_translations.containsKey(lowercaseDesc)) {
      return _translations[lowercaseDesc]![targetLang] ?? description;
    }

    // T√¨m translation theo keyword matching
    for (final entry in _translations.entries) {
      if (lowercaseDesc.contains(entry.key) ||
          entry.key.contains(lowercaseDesc)) {
        return entry.value[targetLang] ?? description;
      }
    }

    // Fallback to original description v·ªõi capitalize
    return _capitalizeFirst(description);
  }

  /// Capitalize first letter c·ªßa description
  String _capitalizeFirst(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1);
  }

  /// Get all supported languages
  List<String> get supportedLanguages => ['en', 'vi'];

  /// Check if language is supported
  bool isLanguageSupported(String langCode) =>
      supportedLanguages.contains(langCode);
}
